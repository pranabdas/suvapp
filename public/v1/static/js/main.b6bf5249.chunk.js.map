{"version":3,"sources":["components/DataHandler.jsx","components/ReadMeComponent.jsx","App.jsx","index.js"],"names":["DataHandler","useState","filename","setFilename","outFilename","SetOutFilename","content","setContent","data","setData","status","setStatus","scan","setScan","isColNames","setIsColNames","colNames","setColNames","xCol","setXCol","ICol","setICol","I0Col","setI0Col","className","style","color","type","onChange","e","target","files","name","reader","FileReader","readAsText","onload","a","text","result","split","width","fontSize","cursor","title","id","value","parseInt","onClick","t0","performance","now","length","scanId","lineId","ii","push","indexOf","lineEnd","lineStart","slice","filter","x","shift","jj","parseFloat","newData","Array","toExponential","t1","Math","random","includes","toLowerCase","window","location","reload","downloadContent","concat","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","alert","dataContent","navigator","clipboard","writeText","marginLeft","map","index","listStyle","ReadMe","textAlign","App","Date","getFullYear","toString","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b6bf5249.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction DataHandler() {\n  const [filename, setFilename] = useState(\"\");\n  const [outFilename, SetOutFilename] = useState(\"\");\n  const [content, setContent] = useState([]);\n  const [data, setData] = useState([]);\n  const [status, setStatus] = useState(\"No data file selected yet.\");\n  const [scan, setScan] = useState(-1);\n  const [isColNames, setIsColNames] = useState(\"\");\n  const [colNames, setColNames] = useState([]);\n  const [xCol, setXCol] = useState(0);\n  const [ICol, setICol] = useState(1);\n  const [I0Col, setI0Col] = useState(-1);\n\n  const ProcessData = () => {\n    const t0 = performance.now();\n\n    // check if there is any content\n    if (!content.length) {\n      setStatus(\"Input file is empty.\");\n      setData([]);\n      setColNames([]);\n      setIsColNames(\"\");\n      return;\n    }\n\n    // check scan number field is not empty\n    if (!scan && scan !== 0) {\n      setStatus(\"Please enter a valid scan number.\");\n      setData([]);\n      setColNames([]);\n      setIsColNames(\"\");\n      return;\n    }\n\n    // find scan id and corresponding line numbers\n    let scanId = [];\n    let lineId = [];\n\n    for (let ii = 0; ii < content.length; ii++) {\n      if (content[ii].split(\" \")[0] === \"#S\") {\n        scanId.push(parseInt(content[ii].split(\" \")[1]));\n        lineId.push(ii + 1);\n      }\n    }\n\n    let id;\n    if (scan === -1) {\n      id = scanId.length - 1;\n      setScan(scanId[scanId.length - 1]);\n    } else {\n      id = scanId.indexOf(scan);\n    }\n\n    // check if the scan exists\n    if (id === -1) {\n      setStatus(`Scan number ${scan} not found.`);\n      setData([]);\n      setColNames([]);\n      setIsColNames(\"\");\n      return;\n    }\n\n    let lineStart = lineId[id];\n    let lineEnd;\n\n    if (id === scanId.length - 1) {\n      lineEnd = content.length - 1;\n    } else {\n      lineEnd = lineId[id + 1] - 1;\n    }\n\n    let data = [];\n    let colNames = [];\n    for (let ii = 0; ii < lineEnd - lineStart; ii++) {\n      if (content[ii + lineStart][0] !== \"#\" && content[ii + lineStart]) {\n        data.push(content[ii + lineStart].split(\" \"));\n      } else if (content[ii + lineStart].slice(0, 2) === \"#L\") {\n        colNames = content[ii + lineStart];\n        colNames = colNames.split(\" \");\n        colNames = colNames.filter((x) => x);\n        colNames.shift();\n      }\n    }\n\n    if (colNames.length) {\n      setColNames(colNames);\n      setIsColNames(\"Column names:\");\n    } else {\n      setColNames([]);\n      setIsColNames([\"No column name found in the header.\"]);\n    }\n\n    // convert intensity values to number instead of str\n    for (let ii = 0; ii < data.length; ii++) {\n      for (let jj = 0; jj < data[0].length; jj++) {\n        data[ii][jj] = parseFloat(data[ii][jj]);\n      }\n    }\n\n    // check if data found\n    if (!data.length) {\n      setStatus(\"Empty data! Please check data file and inputs.\");\n      setData([]);\n      return;\n    }\n\n    // check validity of column index\n    if (!xCol && xCol !== 0) {\n      setStatus(\"Please enter a valid X-col index.\");\n      setData([]);\n      return;\n    }\n\n    if (!ICol && ICol !== 0) {\n      setStatus(\"Please enter a valid intensity-col index.\");\n      setData([]);\n      return;\n    }\n\n    if (!I0Col && I0Col !== 0) {\n      setStatus(\"Please enter a valid I_0-col index.\");\n      setData([]);\n      return;\n    }\n\n    if (xCol > data[0].length - 1 || xCol < 0) {\n      setStatus(\"X-column index is out of range.\");\n      setData([]);\n      return;\n    } else if (ICol > data[0].length - 1 || ICol < 0) {\n      setStatus(\"Intensity-column index is out of range.\");\n      setData([]);\n      return;\n    } else if (I0Col > data[0].length - 1 || I0Col < -1) {\n      setStatus(\"I_0-column index is out of range.\");\n      setData([]);\n      return;\n    }\n\n    // export desired columns\n    let newData = new Array(data.length);\n\n    if (I0Col === -1) {\n      for (let ii = 0; ii < data.length; ii++) {\n        newData[ii] = [data[ii][xCol], data[ii][ICol].toExponential()];\n      }\n    } else {\n      for (let ii = 0; ii < data.length; ii++) {\n        newData[ii] = [\n          data[ii][xCol],\n          (data[ii][ICol] / data[ii][I0Col]).toExponential(),\n        ];\n      }\n    }\n\n    setData(newData);\n\n    const t1 = performance.now();\n    // console.log(\"The processing took \" + (t1 - t0) + \" milliseconds.\");\n    if (newData.length) {\n      setStatus(\n        `Success! Processed in ~${parseInt(\n          t1 - t0 + 1 + Math.random() * 10 // random number [0, 10] added\n        )} millisecond.`\n      );\n    } else {\n      setStatus(\n        \"Empty output! Please check your data file and inputs, and try again!\"\n      );\n    }\n\n    if (\n      [\".csv\", \".dat\", \".txt\"].includes(\n        filename.slice(filename.length - 4, filename.length).toLowerCase()\n      )\n    ) {\n      SetOutFilename(filename.slice(0, filename.length - 4) + \"_scan_\");\n    } else {\n      SetOutFilename(filename + \"_scan_\");\n    }\n  };\n\n  const DownloadPlaintext = () => {\n    if (data.length) {\n      let downloadContent = \"\";\n\n      for (let ii = 0; ii < data.length; ii++) {\n        downloadContent = downloadContent.concat(\n          `${data[ii][0]}\\t${parseFloat(data[ii][1]).toExponential()}\\r\\n`\n        );\n      }\n\n      const element = document.createElement(\"a\");\n      const file = new Blob([downloadContent], { type: \"text/plain\" });\n      element.href = URL.createObjectURL(file);\n      element.download = outFilename + scan + \".txt\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n      element.click();\n    } else {\n      setStatus(\n        \"Empty output! Please check your data file and inputs, and try again!\"\n      );\n      alert(\n        \"Empty output! Please check your data file and inputs, and try again!\"\n      );\n    }\n  };\n\n  const DownloadCSV = () => {\n    if (data.length) {\n      let downloadContent = \"\";\n\n      for (let ii = 0; ii < data.length - 1; ii++) {\n        downloadContent = downloadContent.concat(\n          `${data[ii][0]},${parseFloat(data[ii][1]).toExponential()}\\r\\n`\n        );\n      }\n\n      downloadContent = downloadContent.concat(\n        `${data[data.length - 1][0]},${parseFloat(\n          data[data.length - 1][1]\n        ).toExponential()}`\n      );\n\n      const element = document.createElement(\"a\");\n      const file = new Blob([downloadContent], { type: \"text/csv\" });\n      element.href = URL.createObjectURL(file);\n      element.download = outFilename + scan + \".csv\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n      element.click();\n    } else {\n      setStatus(\n        \"Empty output! Please check your data file and inputs, and try again!\"\n      );\n      alert(\n        \"Empty output! Please check your data file and inputs, and try again!\"\n      );\n    }\n  };\n\n  const CopyToClipboard = () => {\n    if (data.length) {\n      let dataContent = \"\";\n\n      for (let ii = 0; ii < data.length; ii++) {\n        dataContent = dataContent.concat(\n          `${data[ii][0]}\\t${parseFloat(data[ii][1]).toExponential()}\\r\\n`\n        );\n      }\n      setStatus(\n        \"Data copied to clipboard. Now you can directly paste into Origin/Igor/Excel tables.\"\n      );\n      navigator.clipboard.writeText(dataContent);\n    } else {\n      setStatus(\n        \"Empty clipboard! Please check your data file and inputs, and try again!\"\n      );\n      navigator.clipboard.writeText(\"\");\n    }\n  };\n\n  const HandleUpload = (e) => {\n    setFilename(e.target.files[0].name);\n    const reader = new FileReader();\n    reader.readAsText(e.target.files[0]);\n    reader.onload = async (e) => {\n      const text = e.target.result;\n      const content = text.split(\"\\n\");\n      setContent(content);\n      setStatus(\"File selected\");\n      setScan(-1);\n    };\n  };\n\n  return (\n    <div className=\"container\">\n      <h3 style={{ color: \"#15847b\" }}>Convert SUV beamline data</h3>\n      <hr />\n      <br />\n      <form className=\"form\">\n        <p>Select data file:</p>\n        <input\n          type=\"file\"\n          onChange={HandleUpload}\n          style={{ width: \"250px\", fontSize: \"0.9em\", cursor: \"pointer\" }}\n          title=\"Select data file\"\n        />\n\n        <br />\n        <br />\n        <p>\n          Set scan number (default <code>-1</code> reads the last scan):\n        </p>\n        <input\n          type=\"number\"\n          id=\"scan\"\n          name=\"scan\"\n          value={scan}\n          onChange={(e) => {\n            setScan(parseInt(e.target.value));\n          }}\n        ></input>\n        <br />\n        <br />\n        <p>\n          Set X column index below (indexing starts from <code>0</code>):\n        </p>\n        <input\n          type=\"number\"\n          id=\"xCol\"\n          name=\"xCol\"\n          value={xCol}\n          onChange={(e) => {\n            setXCol(parseInt(e.target.value));\n          }}\n        ></input>\n        <br />\n        <br />\n        <p>Set Intensity column index below:</p>\n        <input\n          type=\"number\"\n          id=\"ICol\"\n          name=\"ICol\"\n          value={ICol}\n          onChange={(e) => {\n            setICol(parseInt(e.target.value));\n          }}\n        ></input>\n        <br />\n        <br />\n        <p>\n          Set I<sub>0</sub> column index below (leave <code>-1</code>, if you do\n          not need to divide by I<sub>0</sub>):\n        </p>\n        <input\n          type=\"number\"\n          id=\"I0Col\"\n          name=\"I0Col\"\n          value={I0Col}\n          onChange={(e) => {\n            setI0Col(parseInt(e.target.value));\n          }}\n        ></input>\n      </form>\n\n      <div>\n        <button onClick={ProcessData} className=\"btn\">\n          Process Data\n        </button>\n        <button onClick={() => window.location.reload()} className=\"btn\">\n          Start Over\n        </button>\n        <br />\n        <br />\n        <p className=\"status\">\n          <code>\n            <b>Status: </b>\n            {status}\n          </code>\n        </p>\n      </div>\n      <p>\n        <button className=\"btn\" onClick={DownloadCSV}>\n          Save as CSV\n        </button>\n        <button className=\"btn\" onClick={DownloadPlaintext}>\n          Save as TXT\n        </button>\n        <button className=\"btn\" onClick={CopyToClipboard}>\n          Copy to Clipboard\n        </button>\n      </p>\n      <p style={{ marginLeft: \"1em\" }}>\n        <br />\n        <b>{isColNames}</b>\n        <code>\n          <br />\n          {colNames.map((x, index) => {\n            if (index < 10) {\n              return (\n                <li style={{ listStyle: \"none\" }} key={index}>\n                  &nbsp;{index} &raquo; {x}\n                </li>\n              );\n            } else {\n              return (\n                <li style={{ listStyle: \"none\" }} key={index}>\n                  {index} &raquo; {x}\n                </li>\n              );\n            }\n          })}\n        </code>\n        <br />\n      </p>\n    </div>\n  );\n}\n\nexport default DataHandler;\n","import React from \"react\";\n\nfunction ReadMe() {\n  return (\n    <div className=\"container\">\n      <div className=\"readMe\">\n        <h4 style={{ textAlign: \"center\", fontSize: \"1.2em\" }}>Read me</h4>\n        <p>\n          This program can read SUV beamline data format, and export two needed\n          columns of which first column is usually energy or angle and second\n          column is intensity (or I/I\n          <sub>0</sub>, if you have set I<sub>0</sub> index) to <b>.csv</b> or{\" \"}\n          <b>.txt</b> plaintext formats. You can also copy data to clipboard,\n          and directly paste into Origin/ Igor/ Excel tables, or any other\n          program.\n          <br />\n          <br />\n          Select your data file, set scan number and column indices, and click{\" \"}\n          <b>Process&nbsp;Data</b>. Data columns will be listed above once the\n          file is processed (if your file has column name header). You can\n          re-enter the column indices, and click <b>Process&nbsp;Data</b> button\n          again if you have chosen wrong columns, or you can change the scan\n          number to process multiple scans from the same input file. Note that\n          column header names might not match actual data columns, please\n          consult with beamline personal about your data file format.\n          <br />\n          <br />\n          You may not be able to enter <code>-1</code> in some fields by start\n          typing with <code>-</code> sign. Please type <code>1</code> first, and\n          then move the cursor to the beginning and enter <code>-</code> sign.\n          Alternatively, you may enter <code>0</code> and use the down arrow to\n          set <code>-1</code> if your browser supports.\n          <br />\n          <br />\n          If you upload a new data file with the same name as currently uploaded\n          file, some browsers may not trigger the event which this program\n          relies on updating the states. In such cases, please use the{\" \"}\n          <b>Start&nbsp;Over</b> button before uploading new file with the same\n          name. A sample data file can be found{\" \"}\n          <a href=\"https://suv.netlify.app/data.txt\" target=\"_blank\">\n            here\n          </a>\n          .\n          <br />\n          <br />\n          This is a client side application. All data are processed in your\n          computer locally. Once the webapp (less than 1&nbsp;MB) is loaded in\n          your browser, you do not require internet connection to process your\n          files. Want to improve this application, or curious to find out how it\n          works? View code on{\" \"}\n          <a href=\"https://github.com/pranabdas/suvapp\">GitHub</a>. You can also\n          check out{\" \"}\n          <a href=\"https://pranabdas.github.io/suvtools/\">SUV Python Tools</a>{\" \"}\n          which offers more functionality. If you find any bug or have feedback,\n          please let me know. Thank you.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default ReadMe;\n","import React from \"react\";\nimport DataHandler from \"./components/DataHandler.jsx\";\n// import PlotComponent from \"./components/PlotComponent.jsx\";\nimport ReadMe from \"./components/ReadMeComponent.jsx\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"banner\">\n        <p>\n          This is an older version of the app. The latest version is available{\" \"}\n          <a href=\"https://suv.netlify.app\">here</a>.\n        </p>\n      </div>\n      <DataHandler />\n      {/* <PlotComponent /> */}\n      <ReadMe />\n      <footer>\n        © Copyright {new Date().getFullYear().toString()}{\" \"}\n        <a href=\"https://pranabdas.github.io/\">Pranab Das</a>. All rights\n        reserved.\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport './index.css';\n\nReactDOM.render(< App />, document.getElementById('root'));\n"],"sourceRoot":""}